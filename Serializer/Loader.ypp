/*
 * Fiahil
 *
 * 8 Mai 2012
 */

%require "2.5"
%skeleton "lalr1.cc"
%defines
%locations
%define namespace "Serializer"
%define parser_class_name "Loader"
%parse-param	{ Serializer::Scanner &scanner }
%parse-param	{ Serializer::Unpackman &up }
%lex-param	{ Serializer::Scanner &scanner }
%destructor	{ delete $$.sval; } "identifier"

%code requires {
#include <string>
#include <stdexcept>
#include <sstream>
#include <cassert>
#include "APlayer.hpp"
#include "AI.hpp"
#include "Human.hpp"
#include "Unpackman.hpp"

  namespace Serializer {
    class Scanner;
  }
  class Map;
}

%code {
  static int yylex(Serializer::Loader::semantic_type* yylval,
		   Serializer::Loader::location_type* yylloc,
		   Serializer::Scanner &scanner);
}

%union {
   size_t	ival;
   std::string*	sval;
};

%token <sval> INFO STAT SKILLS ACHIEVEMENTS SAVES HEADER
%token <sval> CONFIG ENDCONFIG MAP ENDMAP PLAYERS ENDPLAYERS
%token <sval> MIXTE
%token <sval> WORD
%token <ival> NUMBER
%token EOL SEP

%%

input
: input line
| line
;

line
: EOL	{}
| info
;

info
: INFO SEP NUMBER SEP WORD SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  up.pf.setId($3);
  up.pf.setName(*$5);
  up.pf.setXp($7);
  up.pf.setTuto($9);
  up.pf.setSkin(static_cast<Skin::eSkin>($11));
}
| STAT SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  up.pf.addStat($3);
  up.pf.addStat($5);
  up.pf.addStat($7);
  up.pf.addStat($9);
  up.pf.addStat($11);
  up.pf.addStat($13);
}
| SKILLS SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  up.pf.addSkill($3);
  up.pf.addSkill($5);
  up.pf.addSkill($7);
}
| ACHIEVEMENTS SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  up.pf.addAchievement($3);
  up.pf.addAchievement($5);
  up.pf.addAchievement($7);
}
| HEADER SEP NUMBER SEP NUMBER EOL
{
  up.ma.setGameMode(static_cast<GameMode::eGameMode>($3));
  up.ma.setCheat($5);
}
| MAP SEP NUMBER SEP NUMBER EOL MIXTE EOL ENDMAP
{
  Map*		m = new Map($3, $5, *$7);

  up.ma.setMap(m);
}
| SAVES sequence
| PLAYERS EOL players
| CONFIG EOL config
;

sequence
: EOL
| SEP NUMBER sequence
{
  up.pf.addSave($2);
}

players
: ENDPLAYERS
| NUMBER SEP NUMBER SEP NUMBER SEP WORD SEP WORD SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL players
{
  assert(up.ma._map != 0);

  APlayer*	p = 0;

  if ($11 > 0)
    p = new Human(*up.ma._map);
  else
    p = new Human(*up.ma._map); //TODO:AI

  p->setName(*$7);
  p->setTeamName(*$9);
  p->setColor($13);
  p->setSkin(static_cast<Skin::eSkin>($15));
  p->setState(static_cast<State::eState>($17));
  p->setDir(static_cast<Dir::eDir>($19));
  p->setWeapon(static_cast<Bomb::eBomb>($21));

  up.ma._players.push_back(p);
  std::cout << "- Player: "
  	    << "\n-> id profil: " << $1
  	    << "\n-> id player " << $3
  	    << "\n-> id team: " << $5
  	    //<< "\n-> nick: " << *$7
  	    //<< "\n-> team name: " << *$9
  	    << "\n-> type: " << ($11 > 0 ? "HUMAN" : "AI")
  	    //<< "\n-> color: " << $13
  	    //<< "\n-> skin: " << $15
  	    //<< "\n-> state: " << $17
  	    //<< "\n-> dir: " << $19
  	    //<< "\n-> weapon: " << $21
  	    << "\n-> x: " << $23
  	    << "\n-> y: " << $25
	    << std::endl << std::endl;
}

config
: ENDCONFIG
| WORD SEP NUMBER SEP WORD EOL config
{
  std::cout << *$1 << ":\t" << $3 << " ; " << *$5 << std::endl;
}


%%

namespace Serializer {
  void		Loader::error(Loader::location_type const& loc,
			      std::string const& msg) {
    std::ostringstream	ret;

    ret << "- Parse error at line " << loc.begin.line
	<< " column " << loc.begin.column << ":\n-- " << msg;
    throw std::runtime_error(ret.str());
  }
}

#include "Scanner.hpp"
static int	yylex(Serializer::Loader::semantic_type* yylval,
		      Serializer::Loader::location_type* yylloc,
		      Serializer::Scanner &scanner) {
  return scanner.yylex(yylval, yylloc);
}
