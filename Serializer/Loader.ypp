/*
 * Fiahil
 *
 * 8 Mai 2012
 */

%require "2.5"
%skeleton "lalr1.cc"
%defines
%locations
%define namespace "Serializer"
%define parser_class_name "Loader"
%parse-param	{ Serializer::Scanner &scanner }
%lex-param	{ Serializer::Scanner &scanner }
%destructor	{ delete $$.sval; } "identifier"

%code requires {
#include <string>
#include <stdexcept>
#include <sstream>

  namespace Serializer {
    class Scanner;
  }
}

%code {
  static int yylex(Serializer::Loader::semantic_type* yylval,
		   Serializer::Loader::location_type* yylloc,
		   Serializer::Scanner &scanner);
}

%union {
   size_t	ival;
   std::string*	sval;
};

%token <sval> INFO STAT SKILLS ACHIEVEMENTS SAVES HEADER
%token <sval> CONFIG ENDCONFIG MAP ENDMAP PLAYERS ENDPLAYERS
%token <sval> MIXTE
%token <sval> WORD
%token <ival> NUMBER
%token EOL SEP

%%

input
: input line
| line
;

line
: EOL	{}
| info
;

info
: INFO SEP NUMBER SEP WORD SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  std::cout << *$1 << ":"
	    << "\n- id: " << $3
	    << "\n- nick: " << *$5
	    << "\n- lvl: " << $7
	    << "\n- xp: " << $9
	    << "\n- tutorial: " << $11
	    << "\n- skin: " << $13
	    << std::endl << std::endl;
}
| STAT SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  std::cout << *$1 << ":"
	    << "\n- Kills: " << $3
	    << "\n- Deaths: " << $5
	    << "\n- Score_max: " << $7
	    << "\n- Defeats: " << $9
	    << "\n- Victory: " << $11
	    << "\n- consecutive_victory: " << $13
	    << std::endl << std::endl;
}
| SKILLS SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  std::cout << *$1 << ":"
	    << "\n- DPS: " << $3
	    << "\n- Tank: " << $5
	    << "\n- Heal: " << $7
	    << std::endl << std::endl;
}
| ACHIEVEMENTS SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  std::cout << *$1 << ":"
	    << "\n- First blood: " << $3
	    << "\n- Last one standing: " << $5
	    << "\n- Immortal: " << $7
	    << std::endl << std::endl;
}
| HEADER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  std::cout << *$1 << ":"
  	    << "\n- id: " << $3
	    << "\n- mode: " << $5
	    << "\n- cheats: " << $7
	    << std::endl << std::endl;
}
| MAP SEP NUMBER SEP NUMBER EOL map
{
  std::cout << *$1 << " x = " << $3 << "; y = " << $5 << std::endl << std::endl;
}
| SAVES sequence
| PLAYERS EOL players
| CONFIG EOL config
;

map
: MIXTE EOL ENDMAP
{
  std::cout << *$1 << std::endl;
}

sequence
: EOL
| SEP NUMBER sequence
{
  std::cout << "- Slot: " << $2 << std::endl;
}

players
: ENDPLAYERS
| NUMBER SEP NUMBER SEP NUMBER SEP WORD SEP WORD SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL players
{
  std::cout << "- Player: "
  	    << "\n-> id profil: " << $1
  	    << "\n-> id player " << $3
  	    << "\n-> id team: " << $5
  	    << "\n-> nick: " << *$7
  	    << "\n-> team name: " << *$9
  	    << "\n-> type: " << ($11 > 0 ? "HUMAN" : "AI")
  	    << "\n-> color: " << $13
  	    << "\n-> skin: " << $15
  	    << "\n-> state: " << $17
  	    << "\n-> dir: " << $19
  	    << "\n-> weapon: " << $21
  	    << "\n-> x: " << $23
  	    << "\n-> y: " << $25
	    << std::endl << std::endl;
}

config
: ENDCONFIG
| WORD SEP NUMBER SEP WORD EOL config
{
  std::cout << *$1 << ":\t" << $3 << " ; " << *$5 << std::endl;
}


%%

namespace Serializer {
  void		Loader::error(Loader::location_type const& loc,
			      std::string const& msg) {
    std::ostringstream	ret;

    ret << "- Parse error at line " << loc.begin.line
	<< " column " << loc.begin.column << ":\n-- " << msg;
    throw std::runtime_error(ret.str());
  }
}

#include "Scanner.hpp"
static int	yylex(Serializer::Loader::semantic_type* yylval,
		      Serializer::Loader::location_type* yylloc,
		      Serializer::Scanner &scanner) {
  return scanner.yylex(yylval, yylloc);
}
