/*
 * Fiahil
 *
 * 8 Mai 2012
 */

%require "2.5"
%skeleton "lalr1.cc"
%defines
%locations
%define namespace "Serializer"
%define parser_class_name "Loader"
%parse-param	{ Serializer::Scanner &scanner }
%parse-param	{ Serializer::Unpackman &up }
%lex-param	{ Serializer::Scanner &scanner }
%destructor	{ delete $$.sval; } "identifier"

%code requires {
#include <string>
#include <stdexcept>
#include <sstream>
#include <cassert>
#include <ctime>
#include "APlayer.hpp"
#include "AI.hpp"
#include "enum.hpp"
#include "Human.hpp"
#include "Unpackman.hpp"

  namespace Serializer {
    class Scanner;
  }
  class Map;
}

%code {
  static int yylex(Serializer::Loader::semantic_type* yylval,
		   Serializer::Loader::location_type* yylloc,
		   Serializer::Scanner &scanner);
}

%union {
   size_t	ival;
   std::string*	sval;
};

%token <sval> INFO STAT ACHIEVEMENTS SAVES HEADER
%token <sval> CONFIG ENDCONFIG MAP ENDMAP PLAYERS ENDPLAYERS DEADS ENDDEADS
%token <sval> MIXTE
%token <sval> WORD
%token <ival> NUMBER
%token EOL SEP

%%

input
: input line
| line
;

line
: EOL	{}
| info
;

info
: INFO SEP WORD SEP NUMBER SEP NUMBER EOL
{
  up.pf.setName(*$3);
  up.pf.setSkin(static_cast<Skin::eSkin>($5));
  up.pf.setSkill(static_cast<Skill::eSkill>($7));
}
| STAT SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  Stat		inst;

  inst.setKills($3);
  inst.setDefeats($5);
  inst.setVictories($7);
  inst.setMaxKills($9);
  up.pf.setStat(inst);
}
| ACHIEVEMENTS SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER
SEP NUMBER SEP NUMBER EOL
{
  std::vector<bool>	success(Success::LAST, false);

  success[0] = $3;
  success[1] = $5;
  success[2] = $7;
  success[3] = $9;
  success[4] = $11;
  success[5] = $13;
  success[6] = $15;
  success[7] = $17;
  up.pf.setAchievement(success);
}
| HEADER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  up.ma._gameMode = static_cast<GameMode::eGameMode>($3);
  up.ma._date = std::string(ctime(reinterpret_cast<time_t const*>(&$5)));
  up.ma._nbPlayer = $7;
}
| MAP SEP NUMBER SEP NUMBER EOL MIXTE EOL ENDMAP
{
  Map*		m = new Map($3, $5, *$7);

  up.ma._map = m;
}
| SAVES sequence
| PLAYERS EOL players
| DEADS EOL deads
| CONFIG EOL config
;

sequence
: EOL
| SEP MIXTE sequence
{
  up.pf.addSave(*$2);
}

players
: ENDPLAYERS
| NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL players
{
  assert(up.ma._map != 0);

  APlayer*	p = 0;

  if ($5 == AIType::HUMAN)
    p = new Human(*up.ma._map, Config());
  else
    p = new AI(static_cast<AIType::eAI>($5), *up.ma._map);

  p->setId($1);
  p->setTeamId($3);
  p->setType(static_cast<AIType::eAI>($5));
  p->setPv($7);
  p->setPos($9, $11);
  p->setColor($13);
  p->setLust($15);
  p->setPower($17);
  p->setNbKills($19);
  p->setSpeed($21);
  p->setWeapon(static_cast<BombType::eBomb>($23));
  p->setSkin(static_cast<Skin::eSkin>($25));
  //p->setState(static_cast<State::eState>($27));
  p->setDir(static_cast<Dir::eDir>($29));

  up.ma._players.push_back(p);
}

deads
: ENDDEADS
| NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL deads
{
  assert(up.ma._map != 0);

  APlayer*	p = 0;

  if ($5 == AIType::HUMAN)
    p = new Human(*up.ma._map, Config());
  else
    p = new AI(static_cast<AIType::eAI>($5), *up.ma._map);

  p->setId($1);
  p->setTeamId($3);
  p->setType(static_cast<AIType::eAI>($5));
  p->setPv($7);
  p->setPos($9, $11);
  p->setColor($13);
  p->setLust($15);
  p->setPower($17);
  p->setNbKills($19);
  p->setSpeed($21);
  p->setWeapon(static_cast<BombType::eBomb>($23));
  p->setSkin(static_cast<Skin::eSkin>($25));
  //p->setState(static_cast<State::eState>($27));
  p->setDir(static_cast<Dir::eDir>($29));

  up.ma._players.push_back(p);
}

config
: ENDCONFIG
| NUMBER SEP NUMBER EOL config
{
  up.pf.addConfig(static_cast<HumGame::eAction>($1), static_cast<gdl::Keys::Key>($3));
}


%%

namespace Serializer {
  void		Loader::error(Loader::location_type const& loc,
			      std::string const& msg) {
    std::ostringstream	ret;

    ret << "- Parse error at line " << loc.begin.line
	<< " column " << loc.begin.column << ":\n-- " << msg;
    throw std::runtime_error(ret.str());
  }
}

#include "Scanner.hpp"
static int	yylex(Serializer::Loader::semantic_type* yylval,
		      Serializer::Loader::location_type* yylloc,
		      Serializer::Scanner &scanner) {
  return scanner.yylex(yylval, yylloc);
}
