/*
 * Fiahil
 *
 * 8 Mai 2012
 */

%require "2.5"
%skeleton "lalr1.cc"
%defines
%locations
%define namespace "Serializer"
%define parser_class_name "Loader"
%parse-param	{ Serializer::Scanner &scanner }
%parse-param	{ Serializer::Unpackman &up }
%lex-param	{ Serializer::Scanner &scanner }
%destructor	{ delete $$.sval; } "identifier"

%code requires {
#include <string>
#include <stdexcept>
#include <sstream>
#include <cassert>
#include "APlayer.hpp"
#include "AI.hpp"
#include "enum.hpp"
#include "Human.hpp"
#include "Unpackman.hpp"

  namespace Serializer {
    class Scanner;
  }
  class Map;
}

%code {
  static int yylex(Serializer::Loader::semantic_type* yylval,
		   Serializer::Loader::location_type* yylloc,
		   Serializer::Scanner &scanner);
}

%union {
   size_t	ival;
   std::string*	sval;
};

%token <sval> INFO STAT ACHIEVEMENTS SAVES HEADER
%token <sval> CONFIG ENDCONFIG MAP ENDMAP PLAYERS ENDPLAYERS
%token <sval> MIXTE
%token <sval> WORD
%token <ival> NUMBER
%token EOL SEP

%%

input
: input line
| line
;

line
: EOL	{}
| info
;

info
: INFO SEP WORD SEP NUMBER SEP NUMBER EOL
{
  up.pf.setName(*$3);
  up.pf.setSkin(static_cast<Skin::eSkin>($5));
  up.pf.setSkill(static_cast<Skill::eSkill>($7));
}
| STAT SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  Stat		inst;

  inst.setKills($3);
  inst.setDefeats($5);
  inst.setVictories($7);
  inst.setMaxKills($9);
  up.pf.setStat(inst);
}
| ACHIEVEMENTS SEP NUMBER SEP NUMBER SEP NUMBER EOL
{
  up.pf.addAchievement($3);
  up.pf.addAchievement($5);
  up.pf.addAchievement($7);
}
| HEADER SEP NUMBER SEP NUMBER EOL
{
  up.ma.setGameMode(static_cast<GameMode::eGameMode>($3));
  up.ma.setCheat($5);
}
| MAP SEP NUMBER SEP NUMBER EOL MIXTE EOL ENDMAP
{
  Map*		m = new Map($3, $5, *$7);

  up.ma.setMap(m);
}
| SAVES sequence
| PLAYERS EOL players
| CONFIG EOL config
;

sequence
: EOL
| SEP MIXTE sequence
{
  up.pf.addSave(*$2);
}

players
: ENDPLAYERS
| NUMBER SEP NUMBER SEP WORD SEP WORD SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER SEP NUMBER EOL players
{
  assert(up.ma._map != 0);

  APlayer*	p = 0;

  if ($11 > 0)
    p = new Human(*up.ma._map, Config()); //TODO CONFIG
  else
    p = new Human(*up.ma._map, Config()); //TODO:AI

  p->setId($1);
  p->setTeamId($3);
  p->setName(*$5);
  p->setTeamName(*$7);
  p->setColor($11);
  p->setSkin(static_cast<Skin::eSkin>($13));
  p->setState(static_cast<State::eState>($15));
  p->setDir(static_cast<Dir::eDir>($17));
  p->setWeapon(static_cast<BombType::eBomb>($19));
  p->setPv($25);
  p->setType($9);
  p->setPos($21, $23);

  up.ma._players.push_back(p);
  std::cout << "- Player: "
  	    //<< "\n-> id player " << $1
  	    //<< "\n-> id team: " << $3
  	    //<< "\n-> nick: " << *$5
  	    //<< "\n-> team name: " << *$7
  	    //<< "\n-> type: " << ($9 > 0 ? "HUMAN" : "AI")
  	    //<< "\n-> color: " << $11
  	    //<< "\n-> skin: " << $13
  	    //<< "\n-> state: " << $15
  	    //<< "\n-> dir: " << $17
  	    //<< "\n-> weapon: " << $19
  	    //<< "\n-> x: " << $21
  	    //<< "\n-> y: " << $23
	    << std::endl << std::endl;
}

config
: ENDCONFIG
| NUMBER SEP NUMBER EOL config
{
  up.pf.addConfig(static_cast<HumGame::eAction>($1), static_cast<gdl::Keys::Key>($3));
}


%%

namespace Serializer {
  void		Loader::error(Loader::location_type const& loc,
			      std::string const& msg) {
    std::ostringstream	ret;

    ret << "- Parse error at line " << loc.begin.line
	<< " column " << loc.begin.column << ":\n-- " << msg;
    throw std::runtime_error(ret.str());
  }
}

#include "Scanner.hpp"
static int	yylex(Serializer::Loader::semantic_type* yylval,
		      Serializer::Loader::location_type* yylloc,
		      Serializer::Scanner &scanner) {
  return scanner.yylex(yylval, yylloc);
}
